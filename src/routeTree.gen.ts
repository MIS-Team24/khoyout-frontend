/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ResetPasswordImport } from './routes/reset-password'

// Create Virtual Routes

const WishlistLazyImport = createFileRoute('/wishlist')()
const SettingsLazyImport = createFileRoute('/settings')()
const RegisterLazyImport = createFileRoute('/register')()
const OtpLazyImport = createFileRoute('/otp')()
const NotificationsLazyImport = createFileRoute('/notifications')()
const MyProfileLazyImport = createFileRoute('/my-profile')()
const LoginLazyImport = createFileRoute('/login')()
const InspirationLazyImport = createFileRoute('/inspiration')()
const HomeLazyImport = createFileRoute('/home')()
const ForgetPasswordLazyImport = createFileRoute('/forget-password')()
const DesignersLazyImport = createFileRoute('/designers')()
const DeleteAccountLazyImport = createFileRoute('/delete-account')()
const ContactLazyImport = createFileRoute('/contact')()
const ComingAppointmentLazyImport = createFileRoute('/coming-appointment')()
const ClientPageLazyImport = createFileRoute('/client-page')()
const IndexLazyImport = createFileRoute('/')()
const SubscriptionIndexLazyImport = createFileRoute('/subscription/')()
const SubscriptionStandardLazyImport = createFileRoute(
  '/subscription/standard',
)()
const SubscriptionPremiumLazyImport = createFileRoute('/subscription/premium')()
const GalleryVideosLazyImport = createFileRoute('/gallery/videos')()
const GalleryImagesLazyImport = createFileRoute('/gallery/images')()
const DesginerDesignerIdIndexLazyImport = createFileRoute(
  '/desginer/$designerId/',
)()

// Create/Update Routes

const WishlistLazyRoute = WishlistLazyImport.update({
  path: '/wishlist',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/wishlist.lazy').then((d) => d.Route))

const SettingsLazyRoute = SettingsLazyImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const OtpLazyRoute = OtpLazyImport.update({
  path: '/otp',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/otp.lazy').then((d) => d.Route))

const NotificationsLazyRoute = NotificationsLazyImport.update({
  path: '/notifications',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/notifications.lazy').then((d) => d.Route))

const MyProfileLazyRoute = MyProfileLazyImport.update({
  path: '/my-profile',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/my-profile.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const InspirationLazyRoute = InspirationLazyImport.update({
  path: '/inspiration',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/inspiration.lazy').then((d) => d.Route))

const HomeLazyRoute = HomeLazyImport.update({
  path: '/home',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/home.lazy').then((d) => d.Route))

const ForgetPasswordLazyRoute = ForgetPasswordLazyImport.update({
  path: '/forget-password',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/forget-password.lazy').then((d) => d.Route),
)

const DesignersLazyRoute = DesignersLazyImport.update({
  path: '/designers',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/designers.lazy').then((d) => d.Route))

const DeleteAccountLazyRoute = DeleteAccountLazyImport.update({
  path: '/delete-account',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/delete-account.lazy').then((d) => d.Route),
)

const ContactLazyRoute = ContactLazyImport.update({
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const ComingAppointmentLazyRoute = ComingAppointmentLazyImport.update({
  path: '/coming-appointment',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/coming-appointment.lazy').then((d) => d.Route),
)

const ClientPageLazyRoute = ClientPageLazyImport.update({
  path: '/client-page',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/client-page.lazy').then((d) => d.Route))

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SubscriptionIndexLazyRoute = SubscriptionIndexLazyImport.update({
  path: '/subscription/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/subscription/index.lazy').then((d) => d.Route),
)

const SubscriptionStandardLazyRoute = SubscriptionStandardLazyImport.update({
  path: '/subscription/standard',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/subscription/standard.lazy').then((d) => d.Route),
)

const SubscriptionPremiumLazyRoute = SubscriptionPremiumLazyImport.update({
  path: '/subscription/premium',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/subscription/premium.lazy').then((d) => d.Route),
)

const GalleryVideosLazyRoute = GalleryVideosLazyImport.update({
  path: '/gallery/videos',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/gallery/videos.lazy').then((d) => d.Route),
)

const GalleryImagesLazyRoute = GalleryImagesLazyImport.update({
  path: '/gallery/images',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/gallery/images.lazy').then((d) => d.Route),
)

const DesginerDesignerIdIndexLazyRoute =
  DesginerDesignerIdIndexLazyImport.update({
    path: '/desginer/$designerId/',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/desginer/$designerId/index.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/client-page': {
      id: '/client-page'
      path: '/client-page'
      fullPath: '/client-page'
      preLoaderRoute: typeof ClientPageLazyImport
      parentRoute: typeof rootRoute
    }
    '/coming-appointment': {
      id: '/coming-appointment'
      path: '/coming-appointment'
      fullPath: '/coming-appointment'
      preLoaderRoute: typeof ComingAppointmentLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/delete-account': {
      id: '/delete-account'
      path: '/delete-account'
      fullPath: '/delete-account'
      preLoaderRoute: typeof DeleteAccountLazyImport
      parentRoute: typeof rootRoute
    }
    '/designers': {
      id: '/designers'
      path: '/designers'
      fullPath: '/designers'
      preLoaderRoute: typeof DesignersLazyImport
      parentRoute: typeof rootRoute
    }
    '/forget-password': {
      id: '/forget-password'
      path: '/forget-password'
      fullPath: '/forget-password'
      preLoaderRoute: typeof ForgetPasswordLazyImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeLazyImport
      parentRoute: typeof rootRoute
    }
    '/inspiration': {
      id: '/inspiration'
      path: '/inspiration'
      fullPath: '/inspiration'
      preLoaderRoute: typeof InspirationLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/my-profile': {
      id: '/my-profile'
      path: '/my-profile'
      fullPath: '/my-profile'
      preLoaderRoute: typeof MyProfileLazyImport
      parentRoute: typeof rootRoute
    }
    '/notifications': {
      id: '/notifications'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof NotificationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/otp': {
      id: '/otp'
      path: '/otp'
      fullPath: '/otp'
      preLoaderRoute: typeof OtpLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/wishlist': {
      id: '/wishlist'
      path: '/wishlist'
      fullPath: '/wishlist'
      preLoaderRoute: typeof WishlistLazyImport
      parentRoute: typeof rootRoute
    }
    '/gallery/images': {
      id: '/gallery/images'
      path: '/gallery/images'
      fullPath: '/gallery/images'
      preLoaderRoute: typeof GalleryImagesLazyImport
      parentRoute: typeof rootRoute
    }
    '/gallery/videos': {
      id: '/gallery/videos'
      path: '/gallery/videos'
      fullPath: '/gallery/videos'
      preLoaderRoute: typeof GalleryVideosLazyImport
      parentRoute: typeof rootRoute
    }
    '/subscription/premium': {
      id: '/subscription/premium'
      path: '/subscription/premium'
      fullPath: '/subscription/premium'
      preLoaderRoute: typeof SubscriptionPremiumLazyImport
      parentRoute: typeof rootRoute
    }
    '/subscription/standard': {
      id: '/subscription/standard'
      path: '/subscription/standard'
      fullPath: '/subscription/standard'
      preLoaderRoute: typeof SubscriptionStandardLazyImport
      parentRoute: typeof rootRoute
    }
    '/subscription/': {
      id: '/subscription/'
      path: '/subscription'
      fullPath: '/subscription'
      preLoaderRoute: typeof SubscriptionIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/desginer/$designerId/': {
      id: '/desginer/$designerId/'
      path: '/desginer/$designerId'
      fullPath: '/desginer/$designerId'
      preLoaderRoute: typeof DesginerDesignerIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  ResetPasswordRoute,
  ClientPageLazyRoute,
  ComingAppointmentLazyRoute,
  ContactLazyRoute,
  DeleteAccountLazyRoute,
  DesignersLazyRoute,
  ForgetPasswordLazyRoute,
  HomeLazyRoute,
  InspirationLazyRoute,
  LoginLazyRoute,
  MyProfileLazyRoute,
  NotificationsLazyRoute,
  OtpLazyRoute,
  RegisterLazyRoute,
  SettingsLazyRoute,
  WishlistLazyRoute,
  GalleryImagesLazyRoute,
  GalleryVideosLazyRoute,
  SubscriptionPremiumLazyRoute,
  SubscriptionStandardLazyRoute,
  SubscriptionIndexLazyRoute,
  DesginerDesignerIdIndexLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/reset-password",
        "/client-page",
        "/coming-appointment",
        "/contact",
        "/delete-account",
        "/designers",
        "/forget-password",
        "/home",
        "/inspiration",
        "/login",
        "/my-profile",
        "/notifications",
        "/otp",
        "/register",
        "/settings",
        "/wishlist",
        "/gallery/images",
        "/gallery/videos",
        "/subscription/premium",
        "/subscription/standard",
        "/subscription/",
        "/desginer/$designerId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/client-page": {
      "filePath": "client-page.lazy.tsx"
    },
    "/coming-appointment": {
      "filePath": "coming-appointment.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/delete-account": {
      "filePath": "delete-account.lazy.tsx"
    },
    "/designers": {
      "filePath": "designers.lazy.tsx"
    },
    "/forget-password": {
      "filePath": "forget-password.lazy.tsx"
    },
    "/home": {
      "filePath": "home.lazy.tsx"
    },
    "/inspiration": {
      "filePath": "inspiration.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/my-profile": {
      "filePath": "my-profile.lazy.tsx"
    },
    "/notifications": {
      "filePath": "notifications.lazy.tsx"
    },
    "/otp": {
      "filePath": "otp.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/wishlist": {
      "filePath": "wishlist.lazy.tsx"
    },
    "/gallery/images": {
      "filePath": "gallery/images.lazy.tsx"
    },
    "/gallery/videos": {
      "filePath": "gallery/videos.lazy.tsx"
    },
    "/subscription/premium": {
      "filePath": "subscription/premium.lazy.tsx"
    },
    "/subscription/standard": {
      "filePath": "subscription/standard.lazy.tsx"
    },
    "/subscription/": {
      "filePath": "subscription/index.lazy.tsx"
    },
    "/desginer/$designerId/": {
      "filePath": "desginer/$designerId/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
